#!/usr/bin/env ruby

require 'bundler/setup'
require 'lfconvert'

require 'optionparser'
require 'fileutils'
require 'date'

trap('SIGINT') {puts ''; exit!}

options = {}

opt_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: lfconvert -a <usd amount> -d <rate date> [options]'

  opts.on('-a', '--amount AMOUNT', 'Use specific USD amount') do |a|
    amount = Float(a) rescue nil
    unless amount
      puts "Invalid amount entered #{a}"
      exit -1
    end
    options[:amount] = BigDecimal.new(a)
  end

  opts.on('-d', '--rate-date DATE', "Use specific exchange rate's date") do |d|
    date = Date.parse(d) rescue nil
    unless date
      puts "Invalid date entered #{d}"
      exit -1
    end
    options[:date] = date.to_s
  end

  opts.on('-b', '--batch DATA', 'Convert all given amount/date pairs') do |b|
    options[:batch] = []
    b.split('|').each do |pairs|
      m = LFConvert::UsdToEurConverter::CEB_LINE_RATE_REGEX.match(pairs)
      if m
        date = m[1]; amount = m[2]

        date = Date.parse(date) rescue nil
        unless date
          puts "Invalid date in batch #{m[1]}"
          exit -1
        end

        _amount = Float(amount) rescue nil
        unless _amount
          puts "Invalid amount in batch #{m[2]}"
          exit -1
        end

        options[:batch] << {date: date.to_s, amount: BigDecimal.new(amount, 2)}
      end
    end
  end

  opts.on('-p', '--precision [PRECISION]', Integer, 'Use specific numeric precision for currency') do |p|
    precision = Integer(p) rescue nil
    if precision.nil? || precision < 0 || precision > 6
      puts "Invalid precision entered #{p}"
      exit -1
    end
    options[:precision] = p.to_i
  end

  opts.on('-f', '--force-update', 'Force update of cached ECB rates file') do |f|
    options[:force] = f
  end

  opts.on('-v', '--verbose', 'Display verbose conversion results') do |v|
    options[:verbose] = v
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit 0
  end
end

opt_parser.parse!

if options[:amount].nil? && (options[:batch].nil? || options[:batch].empty?)
  puts 'missing amount'
  exit -1
end

if options[:date].nil? && (options[:batch].nil? || options[:batch].empty?)
  puts 'missing date'
  exit -1
end

begin
  converter = LFConvert::UsdToEurConverter.new(options)

  results = []
  if options[:batch].nil? || options[:batch].empty?
    results << converter.convert!(options[:amount], options[:date])
  else
    options[:batch].each do |da|
      results << converter.convert!(da[:amount], da[:date])
    end
  end

  if options[:verbose]
    results.each_with_index do |ret, i|
      amount = options[:amount] || options[:batch][i][:amount]
      puts "#{amount.to_s('F')} USD was on #{ret[:nearest_date]} #{ret[:converted_amount]} EUR (at rate #{ret[:rate]})"
    end
  else
    puts results.map{|r|r[:converted_amount]}.join(',')
  end

  exit 0
rescue => e
  puts e
  exit -1
end
